// [TODO]: –ù–æ–≤—ã–µ —Ç–∏–ø—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤, —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä
// [TOOD]: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä–µ–ª—å–±—ã –ø–æ mousedown/mouseup –∏ setInterval/clearInterval
// [TODO]: –ú–µ–Ω—é –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã
// [TODO]: –¢–∞–±–ª–∏—Ü–∞ —Å—á–µ—Ç–∞

const canvas = document.querySelector('#canvas');
canvas.width = window.innerWidth; canvas.height = window.innerHeight;
const ctx = canvas.getContext('2d');

// –ü—Ä–µ–¥–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
let renderTimer,
    spanwTimer,
    spawnTime = 2500,
    scoreCount = 0,
    livesCount = 5,
    levelsCount = 0,
    rocketsCount = 10,
    vx = 0,
    isPaused = false;

const fps = 1000/60;
const CENTER = canvas.height/2 - 30;

const cursor = document.getElementsByTagName('body')[0];

// –ú–∞—Å—Å–∏–≤—ã —Å–Ω–∞—Ä—è–¥–æ–≤ –∏ –≤—Ä–∞–≥–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
let bullets = [],
    enemies = [];

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –¥–≤–∏–≥–∞—é—â–∏—Ö—Å—è —é–Ω–∏—Ç–æ–≤
class Unit {
  constructor(x, y, img) {
    this.x = x || canvas.width;
    this.y = y || CENTER;
    this.width = 80;
    this.height = 60;
    this.hp = 2;
    this.isShielded = false;
    this.img = img || enemy_img;
  }
  shield() {
    this.isShielded = true;
    setTimeout(() => this.isShielded = false, 500);
  }
  draw() {
    if (this.isShielded)  {
      ctx.save();
      ctx.globalAlpha = 0.4;
      ctx.drawImage(this.img, this.x, this.y, this.width, this.height);
      ctx.restore();
    } 
    else {
      ctx.drawImage(this.img, this.x, this.y, this.width, this.height);
    }
  }
}

// –ü–æ–¥–∫–ª–∞—Å—Å –¥–ª—è —é–Ω–∏—Ç–∞ –∏–≥—Ä–æ–∫–∞
class Player extends Unit {
  constructor(x, y, img) {
    super(x, y, img);
    this.hp = livesCount;
  }
  move(mouseY) {
    this.y = mouseY;
  }
  shoot(mouseY, num) {
    let bullet;
    switch (num) {
      case 0: 
        bullet = new Gun(10, mouseY);
        break;
      case 1: 
        if (rocketsCount > 0) {
          bullet = new Rocket(10, mouseY);
          changeRockets(-1);
        }
        break;
    };
    if (bullet !== undefined) bullets.push(bullet);
  }
}

// –ü–æ–¥–∫–ª–∞—Å—Å –¥–ª—è –≤—Ä–∞–∂–µ—Å–∫–∏—Ö —é–Ω–∏—Ç–æ–≤
class EnemyPlane extends Unit {
  constructor(x, y, speed) {
    super(x, y);
    this.speed = speed || 3;
    this.value = 50;
  }
  move() {
    this.x -= this.speed;
  }
}

// –ü–æ–¥-–ø–æ–¥–∫–ª–∞—Å—Å –¥–ª—è –Ω–µ–¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –≤—Ä–∞–∂–µ—Å–∫–∏—Ö —é–Ω–∏—Ç–æ–≤
class EliteEnemyPlane extends EnemyPlane {
  constructor(x, y) {
    super(x, y);
    this.width = 100;
    this.height = 75;
    this.speed = 4.5;
    this.value = 75;
    this.img = elite_enemy_img;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–Ω–∞—Ä—è–¥–æ–≤
class Bullet {
  constructor(x, y, img) {
    this.x = x;
    this.y = y;
    this.img = img || gun_img;
    this.width = 60;
    this.height = 30;
  }
  move() {
    this.x += this.speed;
  }
  checkCollision() {
    let findEnemy = enemies.find(enemy => ( ( (this.y + 15 - enemy.y >= 0) && (this.y + 15 - enemy.y <= enemy.height) ) 
    && (this.x - enemy.x >= 0) && (this.x - enemy.x <= this.speed) && (!enemy.isShielded) ) );
    // –ï—Å–ª–∏ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    // –ò–Ω–∞—á–µ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—É–ª—é
    if (findEnemy) { 
      findEnemy.hp -= this.dmg;
      bullets.splice(bullets.indexOf(this), 1);
      // –ï—Å–ª–∏ hp —Å–∞–º–æ–ª–µ—Ç–∞ < 1 - —É–¥–∞–ª—è–µ–º
      // –ò–Ω–∞—á–µ –≤–µ—à–∞–µ–º —â–∏—Ç
      if (findEnemy.hp <= 0) {
        incScore(findEnemy.value);
        enemies.splice(enemies.indexOf(findEnemy), 1);
        if ( (scoreCount > 0) && (scoreCount % 500 == 0) ) changeRockets(5);
      }
      else findEnemy.shield();
    }
    else {
      ctx.drawImage(this.img, this.x, this.y, this.width, this.height);
    }
  }
}

// –ü–æ–¥–∫–ª–∞—Å—Å –¥–ª—è —Å–Ω–∞—Ä—è–¥–æ–≤ –∏–∑ –æ–±—ã—á–Ω–æ–π –ø—É—à–∫–∏
class Gun extends Bullet {
  constructor(x, y) {
    super(x, y);
    this.dmg = 1;
    this.speed = 50;
  }
}

// –ü–æ–¥–∫–ª–∞—Å—Å –¥–ª—è —Å–Ω–∞—Ä—è–¥–æ–≤ –∏–∑ —Ä–∞–∫–µ—Ç–Ω–∏—Ü—ã
class Rocket extends Bullet {
  constructor(x, y) {
    super(x, y);
    this.dmg = 3;
    this.speed = 20;
    this.img = rocket_img;
  }
  move() {
    this.x += this.speed;
    this.y += Math.random() * (5 - 10) + 5;
  }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function renderGame() {
  renderTimer = setInterval(() => {
    if (isPaused) return false;

    ctx.clearRect(0, 0, 1920*2, 1080);

    ctx.drawImage(clouds_1, vx, 0);
    ctx.drawImage(clouds_2, vx, 0);
    ctx.drawImage(clouds_3, vx, 0);
    ctx.drawImage(clouds_4, vx, 0);
    ctx.drawImage(clouds_1, vx+1920, 0);
    ctx.drawImage(clouds_2, vx+1920, 0);
    ctx.drawImage(clouds_3, vx+1920, 0);
    ctx.drawImage(clouds_4, vx+1920, 0);

    ctx.font = "30px Arial";
    ctx.fillText(`üèÖ: ${scoreCount}`, 20, 50);
    ctx.fillText(`‚ù§Ô∏è: ${livesCount}`, 20, 120, 100);
    ctx.fillText(`üöÄ: ${rocketsCount}`, 120, 120, 100);

    player.draw();

    // –î–≤–∏–≥–∞–µ–º –≤—Å–µ —Å–Ω–∞—Ä—è–¥—ã
    bullets.forEach(el => {
      el.move();
      el.checkCollision();
      // ctx.drawImage(gun_img, el.x, el.y, 60, 30);

      // –ï—Å–ª–∏ —Å–Ω–∞—Ä—è–¥ –≤—ã–ª–µ—Ç–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞ - —É–¥–∞–ª—è–µ–º
      if (el.x >= canvas.width) bullets.splice(bullets.indexOf(el), 1);
    })

    // –î–≤–∏–≥–∞–µ–º –≤—Å–µ—Ö –≤—Ä–∞–∂–µ—Å–∫–∏—Ö —é–Ω–∏—Ç–æ–≤
    enemies.forEach(el => {
      el.move();
      el.draw();
      // –ï—Å–ª–∏ —é–Ω–∏—Ç –≤—ã—à–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞ - —É–¥–∞–ª—è–µ–º
      if (el.x <= -80) {
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –ø–æ–¥ —â–∏—Ç–æ–º - –≤—ã—á–∏—Ç–∞–µ–º —É—Ä–æ–Ω
        if (!player.isShielded) changeLives(-1);
        // –ï—Å–ª–∏ hp –∏–≥—Ä–æ–∫–∞ < 1 - –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
        if (livesCount <= 0) clearInterval(renderTimer);
        player.shield();
        enemies.splice(enemies.indexOf(el), 1);
      }
    })

    vx -= 2;
    if (vx < -1920) vx = 0;
  }, fps);
};

// –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–∞–∂–µ—Å–∫–∏—Ö —é–Ω–∏—Ç–æ–≤
function addEnemy() {
  setTimeout(() => createEnemy(), 3000);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–∞–∂–µ—Å–∫–∏—Ö —é–Ω–∏—Ç–æ–≤
function createEnemy() {
  spanwTimer = setInterval(() => {
    if (isPaused) return false;
    let y = Math.round(Math.random() * (canvas.height - 120) + 60);
    let enemy;
    let num = Math.random();
    switch (levelsCount) {
      case (0):
        enemy = new EnemyPlane(canvas.width, y);
        break;
      case (1):
        if (num >= 0.25) enemy = new EnemyPlane(canvas.width, y);
        else enemy = new EliteEnemyPlane(canvas.width, y);
        break;
      case (2):
        if (num >= 0.5) enemy = new EnemyPlane(canvas.width, y);
        else enemy = new EliteEnemyPlane(canvas.width, y);
        break;
      case (3):
        if (num >= 0.75) enemy = new EnemyPlane(canvas.width, y);
        else enemy = new EliteEnemyPlane(canvas.width, y);
        break;
      default:
        enemy = new EliteEnemyPlane(canvas.width, y);
        break;
    }
    enemies.push(enemy);
  }, spawnTime);
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞
function incScore(value) {
  scoreCount += value;
  if ( Math.floor(scoreCount / 1000) ) levelsCount += 1;
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–µ–π
function changeLives(value) {
  livesCount += value;
}

// –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–µ–Ω—è
function incLevel() {
  levelsCount += 1;
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–æ–∫–µ—Ç
function changeRockets(value) {
  rocketsCount += value;
}


const clouds_1 = new Image(); clouds_1.src = './assets/game_background_1/layers/clouds_1.png';
const clouds_2 = new Image(); clouds_2.src = './assets/game_background_1/layers/clouds_2.png';
const clouds_3 = new Image(); clouds_3.src = './assets/game_background_1/layers/clouds_3.png';
const clouds_4 = new Image(); clouds_4.src = './assets/game_background_1/layers/clouds_4.png';

const player_img = new Image(); player_img.src = './assets/Plane/Fly(1).png';
const enemy_img = new Image(); enemy_img.src = './assets/Plane/Flying_Enemy(1).png';
const elite_enemy_img = new Image(); elite_enemy_img.src = './assets/Plane/Flying_Enemy_Elite(1).png';

const gun_img = new Image(); gun_img.src = './assets/Bullet/Bullet(1).png';
const rocket_img = new Image(); rocket_img.src = './assets/Bullet/Missile(1).png';

// –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
if ( document.images ) {
  renderGame();
  addEnemy();
}

const player = new Player(10, CENTER, player_img);

canvas.addEventListener('mousemove', e => {
  if (isPaused) return false;
  let bounds  = canvas.getBoundingClientRect();
  let mouseY = e.clientY - bounds.top - scrollY - player.height/2;
  if (canvas.height - mouseY <  60) mouseY = canvas.height - 60;
  else if (mouseY < 0) mouseY = 0;
  player.move(mouseY);
})

canvas.addEventListener('mousedown', e => {
  if (isPaused) return false;
  let bounds  = canvas.getBoundingClientRect();
  let mouseY = e.clientY - bounds.top - scrollY;
  if (canvas.height - mouseY <  60) 
    mouseY = canvas.height - 40;
  // –ï—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ - –≤—ã–∑—ã–≤–∞–µ–º shoot –æ—Ç 0
  // –ò–Ω–∞—á–µ –≤—ã–∑—ã–≤–∞–µ–º shoot –æ—Ç 1
  changeCursor();
  if (detectLeftButton(e)) player.shoot(mouseY, 0);
  else player.shoot(mouseY, 1);
})

canvas.addEventListener('contextmenu', e => e.preventDefault());

document.addEventListener('keydown', e => {
  if (e.which == 32) isPaused = !isPaused;
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏ –º—ã—à–∏
function detectLeftButton(event) {
   if ('buttons' in event) {
      return event.buttons === 1;
  } else if ('which' in event) {
      return event.which === 1;
  } else {
      return (event.button == 1 || event.type == 'click');
  }
}

function changeCursor() {
  cursor.style = "cursor: url('./assets/Cursor/crosshair_hit.png'), pointer";
  setTimeout(() => {cursor.style = "cursor: url('./assets/Cursor/crosshair.png'), pointer;"}, 100 );
}